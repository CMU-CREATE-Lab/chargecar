<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="ChargeCarPrize" default="all">
   <dirname property="base.directory" file="${ant.file}"/>
   <property file="build.properties"/>

   <!-- Paths -->
   <path id="contestant-policies-classpath">
      <!-- other classes within this project -->
      <pathelement path="${javatestsuite.build.dir}"/>

      <!-- third-party jars -->
   </path>

   <path id="javatestsuite-classpath">
      <!-- third-party jars -->
   </path>

   <!-- Compiler resources -->
   <patternset id="compiler.resources">
      <!-- excluded files -->
      <exclude name="**/CVS/**"/>
      <exclude name="**/SCCS/**"/>
      <exclude name="**/RCS/**"/>
      <exclude name="**/rcs/**"/>
      <exclude name="**/.DS_Store/**"/>
      <exclude name="**/.svn/**"/>
      <!-- included files -->
      <include name="**/?*.properties"/>
      <include name="**/?*.xml"/>
      <include name="**/?*.htm"/>
      <include name="**/?*.html"/>
      <include name="**/?*.dtd"/>
      <include name="**/?*.tld"/>
      <include name="**/?*.xsd"/>
      <include name="**/?*.xsl"/>
      <include name="**/?*.gif"/>
      <include name="**/?*.png"/>
      <include name="**/?*.jpeg"/>
      <include name="**/?*.jpg"/>
      <include name="**/?*.dll"/>
      <include name="**/?*.lib"/>
      <include name="**/?*.ice"/>
      <include name="**/?*.pem"/>
   </patternset>

   <tstamp>
      <format property="build.timestamp" pattern="yyyy-MM-dd hh:mm:ss a z"/>
   </tstamp>

   <target name="all" depends="clean, dist" description="clean, then build everything"/>

   <target name="clean" depends="clean-javatestsuite, clean-contestant-policies" description="clean up everything"/>

   <target name="clean-javatestsuite" description="clean up javatestsuite">
      <delete dir="${javatestsuite.build.dir}"/>
      <delete dir="${javatestsuite.dist.dir}"/>
   </target>

   <target name="clean-contestant-policies" description="clean up contestant-policies">
      <delete dir="${contestant-policies.build.dir}"/>
      <delete dir="${contestant-policies.dist.dir}"/>
   </target>

   <target name="build" depends="build-javatestsuite, build-contestant-policies" description="builds the source code" unless="build-is-complete">
      <property name="build-is-complete" value="true"/>
   </target>

   <target name="build-javatestsuite" description="compiles the java source for javatestsuite" unless="build-javatestsuite-is-complete">
      <compile-code-and-copy-resources src.dir="${javatestsuite.src.dir}"
                                       build.dir="${javatestsuite.build.dir}"
                                       classpath-ref="javatestsuite-classpath"/>

      <property name="build-javatestsuite-is-complete" value="true"/>
   </target>

   <target name="build-contestant-policies" depends="build-javatestsuite" description="compiles the java source for contestant-policies" unless="build-contestant-policies-is-complete">
      <compile-code-and-copy-resources src.dir="${contestant-policies.src.dir}"
                                       build.dir="${contestant-policies.build.dir}"
                                       classpath-ref="contestant-policies-classpath"/>

      <property name="build-contestant-policies-is-complete" value="true"/>
   </target>

   <target name="dist" depends="dist-javatestsuite, dist-contestant-policies" description="builds the project" unless="dist-is-complete">
      <property name="dist-is-complete" value="true"/>
   </target>

   <target name="dist-javatestsuite" depends="build-javatestsuite" description="builds the javatestsuite" unless="dist-javatestsuite-is-complete">
      <!-- create the dist directory -->
      <mkdir dir="${javatestsuite.dist.dir}"/>

      <create-dist component.name="javatestsuite">
         <jar-manifest-attributes>
            <attribute name="Main-Class" value="chargecar.Simulator"/>
         </jar-manifest-attributes>
      </create-dist>

      <property name="dist-javatestsuite-is-complete" value="true"/>
   </target>

   <target name="dist-contestant-policies" depends="dist-javatestsuite, build-contestant-policies" description="builds the contestant-policies" unless="dist-contestant-policies-is-complete">
      <!-- create the dist directory -->
      <mkdir dir="${contestant-policies.dist.dir}"/>

      <!-- copy required jar files -->
      <copy todir="${contestant-policies.dist.dir}" flatten="true">
         <fileset file="${javatestsuite.dist.dir}/${javatestsuite.jar.filename}"/>
      </copy>

      <create-dist component.name="contestant-policies">
         <jar-manifest-attributes>
            <attribute name="Main-Class" value="chargecar.Simulator"/>
         </jar-manifest-attributes>
      </create-dist>

      <property name="dist-contestant-policies-is-complete" value="true"/>
   </target>

   <!-- ============================================================================================================ -->
   <!-- Macro definitions -->
   <!-- ============================================================================================================ -->

   <macrodef name="compile-code-and-copy-resources">
      <attribute name="classpath-ref"/>
      <attribute name="build.dir"/>
      <attribute name="src.dir"/>
      <element name="resources-filterset" optional="true"/>
      <sequential>
         <!-- create the build directory -->
         <mkdir dir="@{build.dir}"/>

         <!-- compile code -->
         <javac srcdir="@{src.dir}"
                destdir="@{build.dir}"
                classpathref="@{classpath-ref}"
                debug="${java.compiler.debug}"
                nowarn="${java.compiler.generate.no.warnings}"
                memorymaximumsize="${java.compiler.max.memory}"
                source="${java.compiler.source.level}"
                target="${java.compiler.target.level}"
                fork="true"
                includeantruntime="false">
            <compilerarg line="${java.compiler.args}"/>
         </javac>

         <!-- copy resources -->
         <copy todir="@{build.dir}">
            <fileset dir="@{src.dir}">
               <patternset refid="compiler.resources"/>
            </fileset>
            <resources-filterset/>
         </copy>

      </sequential>
   </macrodef>

   <macrodef name="create-dist">
      <attribute name="component.name"/>
      <element name="jar-manifest-attributes" optional="true"/>
      <sequential>

         <!-- define the execution classpath for use in the scripts -->
         <path id="@{component.name}.execution.classpath.elements">
            <pathelement location="${@{component.name}.dist.dir}"/>
            <fileset dir="${@{component.name}.dist.dir}">
               <include name="**/*.jar"/>
            </fileset>
         </path>

         <!-- Set up a path id for the dist directory so it contains the correct kind of slashes when we do the pathconvert mapping -->
         <path id="dist-@{component.name}.dir.before-conversion" path="${@{component.name}.dist.dir}"/>

         <!-- Convert the dist directory path for the target platform to ensure that all the slashes are in the right direction -->
         <pathconvert property="dist-@{component.name}.dir.after-conversion" dirsep="/" pathsep=":" refid="dist-@{component.name}.dir.before-conversion"/>

         <!-- Create the classpath -->
         <pathconvert property="@{component.name}.execution.classpath" dirsep="/" pathsep=" " refid="@{component.name}.execution.classpath.elements">
            <map from="${dist-@{component.name}.dir.after-conversion}" to="."/>
         </pathconvert>

         <!-- create jar of Java classes -->
         <jar destfile="${@{component.name}.dist.dir}/${@{component.name}.jar.filename}"
              basedir="${@{component.name}.build.dir}"
              update="no"
              compress="true">
            <manifest>
               <attribute name="Built-By" value="${jar.built-by}"/>
               <attribute name="Build-Timestamp" value="${build.timestamp}"/>
               <attribute name="Class-Path" value="${@{component.name}.execution.classpath}"/>
               <jar-manifest-attributes/>
            </manifest>
         </jar>

      </sequential>
   </macrodef>

</project>
